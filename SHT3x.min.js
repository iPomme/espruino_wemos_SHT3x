const DEFAULT_ADDR=0x45;const I2C_CMD=[0x2c,0x06];const LATENCY=500;exports.connect=(i2c,addr)=>{return new SHT3x(i2c,addr)};function SHT3x(i2c,addr){this.i2c=i2c;this.addr=addr||DEFAULT_ADDR}SHT3x.prototype.readTemperature=()=>{let that=this;let cmd=()=>{return new Promise((resolve,reject)=>{resolve(that.i2c.writeTo(that.addr,I2C_CMD))})};let getTemp=()=>{return new Promise((resolve,reject)=>{setTimeout(()=>{let rawData=that.i2c.readFrom(that.addr,6);let t=((((rawData[0]*256.0)+rawData[1])*175)/65535.0)-45;resolve(t)},LATENCY)})};return cmd().then(getTemp)};SHT3x.prototype.readHumidity=()=>{let that=this;let cmd=()=>{return new Promise((resolve,reject)=>{resolve(that.i2c.writeTo(that.addr,I2C_CMD))})};let getHumidity=()=>{return new Promise((resolve,reject)=>{setTimeout(()=>{let rawData=that.i2c.readFrom(that.addr,6);let h=((((rawData[3]*256.0)+rawData[4])*100)/65535.0);resolve(h)},LATENCY)})};return cmd().then(getHumidity)};SHT3x.prototype.readAll=()=>{let that=this;let cmd=()=>{return new Promise((resolve,reject)=>{resolve(that.i2c.writeTo(that.addr,I2C_CMD))})};let getAll=()=>{return new Promise((resolve,reject)=>{setTimeout(()=>{let rawData=that.i2c.readFrom(that.addr,6);let h=((((rawData[3]*256.0)+rawData[4])*100)/65535.0);let t=((((rawData[0]*256.0)+rawData[1])*175)/65535.0)-45;resolve({temperature:t,humidity:h})},LATENCY)})};return cmd().then(getAll)};
